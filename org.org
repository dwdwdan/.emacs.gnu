#+TITLE: Org Mode Configuration
#+OPTIONS: html-style:nil num:nil
#+PROPERTY: header-args :tangle org.el
#+auto_tangle: t

Org mode is one of the main reasons I use emacs, I use it for tracking my todo lists (using the GTD system), taking notes for my university work, and configuring emacs.

* GTD
** Files that I'm using
- ~inbox.org~ is where all my captures go. It is intended to be reviewed often, and tasks should not sit here for long
- ~gtd.org~ is the main file for near-future todos. It has top level headings for projects, and a special project called ~single tasks~ for any tasks that don't fit.
- ~someday.org~ is structured the same as ~gtd.org~ but is for tasks that I don't plan to do in the short term
- ~tickler.org~ is for tasks that have a scheduled date in the far future
- ~reference.org~ is for reference materials, or for any articles I want to keep filed
- ~gtd_archive.org~ is where completed or cancelled tasks get archived
- ~recipeIdeas.org~ is for recipe ideas that I come up with

** Contexts
Contexts will be implemented as tags starting with an @ symbol. I plan to have
- @campus
- @home
- @laptop
- @wolves
These will be exclusive, if I can do it anywhere I have my laptop it will get the @laptop tag, if I have to be on campus @campus, at home @home, or in wolverhampton (my hometown) @wolves
#+begin_src emacs-lisp
  (setq org-tag-alist '(("@campus" . ?c)
                        ("@home" . ?h)
                        ("@laptop" . ?l)
                        ("@wolves" . ?w)))
#+end_src

** Keywords
For todo keywords, I plan to use a similar system to [[http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html#sec-8][Charles Cave]]. These are mostly obvious as to what they mean, except for APPT, which is for things that have to happen at a certain time. NEXT is used for the next task to complete in a project.
#+begin_src emacs-lisp
  (setq org-todo-keywords '((sequence
                             "TODO(t)"
                             "NEXT(n)"
                             "STARTED(s)"
                             "WAITING(w)"
                             "APPT(a)"
                             "|"
                             "DONE(d)"
                             "CANCELLED(c)")))
#+end_src

** Archiving
I want to archive into a datetree in ~gtd_archive.org~.
#+begin_src emacs-lisp
  (setq org-archive-location (concat
                              (expand-file-name "gtd_archive.org" gtd-dir)
                              "::datetree/"))
#+end_src

** Capture
Any captures should go into ~inbox.org~. I use ~:immediate-finish~ to avoid having to press ~C-c C-c~.
#+begin_src emacs-lisp
  (setq org-capture-templates
  ;; First, a standard template that just takes a string
        `(("t" "TODO [inbox]" entry (file ,(expand-file-name "inbox.org" gtd-dir))
           "* TODO %^{Description}\nCreated: %U"
           :empty-lines 1
           :immediate-finish t)
  ;; An email capture template, for use with mu4e. It is blocked from being used elsewhere by org-capture-templates-contexts below.
          ("m" "MAIL [inbox]" entry (file ,(expand-file-name "inbox.org" gtd-dir))
           "* TODO %^{Description}\n%:from: %a\nCreated:%U"
           :empty-lines 1
           :immediate-finish t)
  ;; A file capture template, which additionally attaches a link to the current location.
          ("f" "TODO (File) [inbox]" entry (file ,(expand-file-name "inbox.org" gtd-dir))
           "* TODO %^{Description}\n%a\nCreated: %U"
           :empty-lines 1
           :immediate-finish t)))
  #+end_src

  We use ~org-capture-templates-contexts~ to prevent me from trying to capture an email when not in mu4e.
#+begin_src emacs-lisp
  (setq org-capture-templates-contexts
        '(("m" ((in-mode . "mu4e-headers-mode")
                (in-mode . "mu4e-view-mode")))))
#+end_src

** Agenda
My agenda view will probably need adjusting, it may be a good idea to add [[https://github.com/alphapapa/org-super-agenda][org-super-agenda]] to better split tasks based on project priority.

*** Agenda Files
We want to add all gtd files to ~org-agenda-files~.
#+begin_src emacs-lisp
  (setq org-agenda-files nil)
  (dolist (file '("gtd.org" "inbox.org" "tickler.org"))
    (add-to-list 'org-agenda-files (expand-file-name file gtd-dir)))
#+end_src

*** Commands
I want an agenda command for each context I could be in. I'm assuming that I'll always have my laptop on me (which I must do if I'm using emacs).
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands '(("c" "Campus"
                                      ((tags "@campus|@laptop")))
                                     ("h" "Home"
                                      ((tags "@home|@laptop")))
                                     ("l" "Laptop"
                                      ((tags "@laptop")))
                                     ("w" "Wolves"
                                      ((tags "@wolves|@laptop")))
                                     ("n" "Next"
                                      ((todo "NEXT")))
                                     ("a" "All"
                                      ((agenda)
                                       (alltodo "")))))
#+end_src

*** Cosmetics
I need to turn of ~display-line-numbers-mode~ in the agenda, so tags appear on the right, rather than on the next line:
#+begin_src emacs-lisp
  (add-hook 'org-agenda-mode-hook '(lambda()
                                     (display-line-numbers-mode -1)))
#+end_src

I want my org agenda to always start on the previous monday, and show 7 days (i.e. show the full current week). 
#+begin_src emacs-lisp
  (setq org-agenda-span 7
        org-agenda-start-on-weekday 1
        org-agenda-start-day "+0d")
  #+end_src

*** Keybindings
I need the package ~evil-org~ to add evil keys to the agenda. I don't know why this isn't included in ~evil-collection~
#+begin_src emacs-lisp
  (use-package evil-org
    :after org
    :hook (org-mode . evil-org-mode)
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

** Refile
We want to be able to refile from ~inbox.org~ to any of my files, including ~gtd.org~, ~someday.org~ and ~reference.org~
#+begin_src emacs-lisp
    ;; Allow org-refile to refile into top level headings.
    ;; This is used to create a new project.
    (setq org-refile-use-outline-path 'file
          org-outline-path-complete-in-steps nil)

    (setq org-refile-targets `((,(expand-file-name "gtd.org" gtd-dir) :maxlevel . 1)
                               (,(expand-file-name "someday.org" gtd-dir) :maxlevel . 1)
                               (,(expand-file-name "tickler.org" gtd-dir) :maxlevel . 1)
                               (,(expand-file-name "recipeIdeas.org" gtd-dir) :maxlevel . 1)
                             (,(expand-file-name "reference.org" gtd-dir) :maxlevel . 1)))
#+end_src

Whenever I refile a todo, I want to save all buffers. By default emacs will simply move the item, but not save the files. This essentially means that if emacs is forced to shutdown the refile will not have happened.
#+begin_src emacs-lisp
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src

** Mappings
We need easier mappings to archive, refile etc:
#+begin_src emacs-lisp
  (dan/local-leader
    :keymaps 'org-mode-map
    "a" '(org-archive-subtree :which-key "Archive")
    "r" '(org-refile :which-key "Refile")
    "c" '(org-clock-in :which-key "Clock in"))
  #+end_src

  We want a clock out command to be global
#+begin_src emacs-lisp
  (dan/leader
    "n c" '(org-clock-out :which-key "Clock out"))
#+end_src

We also want a global mapping to go to the inbox, used when I want to review and file it.
#+begin_src emacs-lisp
  (defun dan/go-to-inbox ()
    (interactive)
    (find-file (expand-file-name "inbox.org" gtd-dir)))

  (dan/leader
    "o i" '(dan/go-to-inbox :which-key "Inbox"))
#+end_src

* Cosmetics
** Heading Size
First we set the headings to be bigger than the standard text size. we have to use floats for these so that emacs uses a scale factor rather than setting the height explicitly (the title was very weird being only 3 high).
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (dolist (face '((org-document-title . 3.0)
                    (org-level-1 . 1.5)
                    (org-level-2 . 1.4)
                    (org-level-3 . 1.3)
                    (org-level-4 . 1.2)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.05)))
      (set-face-attribute (car face) nil :weight 'bold :height (cdr face))))
#+end_src

** Mixed Pitch
The mixed pitch package sets certain elements in a document to be fixed pitch and others to variable. This is very useful in org mode, so I can have a variable pitch font for most of the body, but a fixed pitch font for code blocks.
#+begin_src emacs-lisp
  (use-package mixed-pitch
  :hook (org-mode . mixed-pitch-mode))
#+end_src

** Bullets
Org superstar is a package that turns the * in headers into nicer characters. The variable ~org-superstar-headline-bullets-list~ sets the characters to use.
#+begin_src emacs-lisp
  (use-package org-superstar
    :hook
    (org-mode . org-superstar-mode)
    :config
    (setq org-superstar-headline-bullets-list '("◉" "○")
          org-superstar-leading-bullet ?\s))
#+end_src

** Ellipsis
The ellipsis is the symbol shown to the right of a folded header. I like to use ~U+25BC~ (~▼~).
#+begin_src emacs-lisp
(setq org-ellipsis " ▼")
#+end_src

** Emphasis Markers
I don't like to see the emphasis markers (~~~, ~*~ etc) so we get org to hide them
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

** Startup
When I open an org mode buffer, I want latex previews and inline images. I also want to start with org folded
#+begin_src emacs-lisp
  (setq org-startup-with-latex-preview t
        org-startup-with-inline-images t
        org-startup-folded t
        org-startup-indented t)
#+end_src



* Use-package
This block actually requires org mode and activates the hooks.
#+begin_src emacs-lisp
  (use-package org
    :hook
    (org-mode . (lambda() (display-line-numbers-mode -1))))

  (use-package org-contrib)
#+end_src

* Mappings
So far I just have org capture bound outside of org mode itself, though I may add additional bindings for finding a notes file or similar. I also have set local mappings for tangling and exporting org files.
#+begin_src emacs-lisp
  (dan/leader
    "n" '(:ignore t :which-key "Notes")
    "n n" '(org-capture :which-key "Org Capture"))
  
  (dan/local-leader
    :keymaps 'org-mode-map
    "T" '(org-babel-tangle :which-key "Tangle")
    "e" '(org-export-dispatch :which-key "Export")
    "l" '(org-insert-link :which-key "Insert Link")
    "t" '(org-todo :which-key "Todo"))
#+end_src

* LaTeX
** Monospace Fonts
I want latex blocks to be properly monospaced
#+begin_src emacs-lisp
(setq org-highlight-latex-and-related '(native))
#+end_src

** Fragtog
Org fragtog will render latex previews when the cursor is outside them. It will turn off the rendering when the cursor enters the block, allowing easier editing.
#+begin_src emacs-lisp
  (use-package org-fragtog
    :hook (org-mode . org-fragtog-mode))
#+end_src

We also want to scale up latex renders to better match the font size
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq-plist-put org-format-latex-options :scale 1.5))
#+end_src

* Export
I don't want a html postamble
#+begin_src emacs-lisp
(setq org-html-postamble nil)
#+end_src

I want to use my default CSS by default:
#+begin_src emacs-lisp
  (setq org-html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://dwdwdan.github.io/org-html/css.css\"/>
  <script type=\"text/javascript\" src=\"https://dwdwdan.github.io/org-html/js.js\"></script>")
#+end_src

I don't want org to run all the code in a file when it exports
#+begin_src emacs-lisp
(setq org-export-use-babel nil)
#+end_src


I want a command to export to html and send to my website
#+begin_src emacs-lisp
  (defconst server-name "server"
    "A string representing the ssh location of the web server.
                    For example, if you run `ssh user@123.456.789.123` to ssh into the server, `server-name` should be set to `user@123.456.789.123`")

  (defconst server-website-location "/var/www/personal/"
    "A string representing the file path on the web server where you wnat exported files to be stored.
                     This should contain a trailing /")

  (defconst web-address "https://dwdwdan.xyz/"
    "A string representing the url to the web server. This should lead to the folder where exported files are stored
                    This should contain a trailing /, as well as the protocol to be used")


  (defun dan/export-to-html-server (&optional should-open-in-browser)
    "Export the current org file to html and copy to web server.
It will use the values of `server-name’, `server-website-location’ and `web-address’ to upload using scp.

If invoked using a prefix argument or with SHOULD-OPEN-IN-BROWSER non-nil it will also open the exported file in a web browser using `browse-url-xdg-open'"
    (interactive "P")
    ;; org-html-export-to-html returns the exported file-name
    (setq file-name (org-html-export-to-html))
    ;; we use a big concat to form the command we need to run
    (setq shell-command-to-run (concat "scp " file-name " " server-name ":" server-website-location file-name))
    (shell-command shell-command-to-run)
    (setq uploaded-web-address (concat web-address file-name))
    ;; copy the web address it's available at to the clipboard
    (kill-new uploaded-web-address)
    (when should-open-in-browser
      ;; if should-open-in-browser is non-nil, we want to open it
      (browse-url-xdg-open uploaded-web-address))
    ;; send a message to tell the user where to find it
    (message (concat "Viewable at " uploaded-web-address ".
  Address has been copied to clipboard.")))
#+end_src

* Htmlize
Htmlize seems to be a depency to export to html properly.
#+begin_src emacs-lisp
  (use-package htmlize)
#+end_src

* Auto Tangle
org-auto-tangle will automatically tangle an org file if it has ~#+auto_tangle~ set to ~t~
#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :hook
    (org-mode . org-auto-tangle-mode))
#+end_src

* Publish
I use org publish to publish my emacs config to my website.
#+begin_src emacs-lisp
  (setq org-publish-project-alist (list
                                   (list "emacs config"
                                         :base-directory "~/.emacs.gnu"
                                         :publishing-directory "/ssh:server:/var/www/personal/emacs"
                                         ;;:publishing-directory "~/tmp"
                                         :base-extension "org"
                                         :publishing-function 'org-html-publish-to-html
                                         :recursive nil)))
#+end_src

* Github Links
[[https://github.com/lygaret/emacs.d/blob/rewrite/site-lisp/org-github-links.el][org-github-links.el]] is a package/script to add easy github links to org. They have the form

#+begin_example
github:user/repo
github:user/repo@a738b4b8
github:user/repo#45
#+end_example

#+begin_src emacs-lisp
(dan/load-config-file "org-github-links")
#+end_src


