
#+TITLE: Emacs Configuration
#+OPTIONS: html-style:nil num:nil
#+PROPERTY: header-args :tangle init.el
#+auto_tangle: nil
Welcome to my emacs config, I'm relatively new to emacs and elisp so everything in here is likely to change. This document is available on github at [[github:dwdwdan/.emacs.gnu][dwdwdan/.emacs.gnu]] or on my website at [[https:dwdwdan.xyz/emacs.html][dwdwdan.xyz/emacs.html]].

* System Variables
We set ~sync-dir~ based on OS. This mostly does nothing as I don't actually have emacs on any of my windows machines
#+begin_src emacs-lisp
  (defconst sync-dir 
    (cond ((eq system-type 'windows-nt)
           (setq sync-dir "C:/Users/Daniel Walters/Dropbox")
           ;; Windows-specific code goes here.
           )
          ((eq system-type 'gnu/linux)
           (setq sync-dir "~/Nextcloud")
           ;; Linux-specific code goes here.
           ))
    "Directory that files should be synced in. ~/Nextcloud by
    default on linux and C://Users.Daniel Walters/Dropbox on
    windows")

  (defconst config-file "emacs.org"
    "Emacs Configuration file name. This should be a file name
    relative to `config-dir'. This is used to open the config file
    with one button press")

  (defconst config-dir "~/.emacs.gnu"
    "Emacs Configuration Directory. This is where emacs config
    files should be stored")

  (defconst gtd-dir "~/Nextcloud/Org"
  "Directory that files for GTD are stored.")
#+end_src

* Straight.el
Run the bootstrap from the straight.el docs to make sure straight is installed.
#+begin_src emacs-lisp
  ;; Straight.el Bootstrap
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Configure straight
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
  (setq use-package-always-demand t)

#+end_src

#+begin_src emacs-lisp :tangle early-init.el
(setq package-enable-at-startup nil)
#+end_src

* Helper Functions

** Load config file
First we define a function to run an elisp file in ~config-dir.~
#+begin_src emacs-lisp
    ;; We need the s library to do some string comparison
      (use-package s)

      (defun dan/load-config-file(file)
  "Loads a config file FILE, stored in `config-dir'. Used as a
  helper function to load additional configuration files"
        (interactive "M")
        (unless (s-suffix? ".el" file)
          (setq file (concat file ".el")))
        (setq file (expand-file-name file config-dir))
        (unless (file-exists-p file)
          (error "File %s does not exist. It cannot be loaded." file))
        (load-file file))
#+end_src

** setq-plist-put
A macro to simplify using ~plist-put~. Stolen from [[https://emacs.stackexchange.com/a/39474][xuchunyang on the emacs stackexchange]].
#+begin_src emacs-lisp
  (defmacro setq-plist-put (plist &rest args)
    (let ((list nil))
      (while args
        (push `(setq ,plist (plist-put ,plist ,(pop args) ,(pop args))) list))
      (cons 'progn (nreverse list))))
#+end_src

* Cosmetics

** Fonts
I personally use the jetbrainsmono font for monospace, and liberation sans (which is similar to microsoft's arial) for variable width fonts.
#+begin_src emacs-lisp
    (defun dan/set-fonts (&optional frame)
  ;; If frame is nil, we aren't in daemon mode, so don't need to select the frame
      (when frame
        (select-frame frame))
      (set-face-attribute 'default nil :font "Jetbrainsmono-12")
      (set-face-attribute 'fixed-pitch nil :font "Jetbrainsmono-12")
      (set-face-attribute 'variable-pitch nil :font "Liberation Sans-12"))

    ;; If emacs is running in daemon mode, we need to wait until a frame has been created to set the font. Otherwise we can set the fonts now
    (if (daemonp)
        (add-hook 'after-make-frame-functions #'dan/set-fonts)
      (dan/set-fonts))
  #+end_src 

** Line Numbers
I like to have relative line numbers. I tend to move around using ~5j~ and similar more than using ~:143~ to jump to a specific line.
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode)
#+end_src

** Visual Line Mode
I prefer to use ~visual-line-mode~ rather than ~truncate-lines~. I think it looks nicer.
#+begin_src emacs-lisp
  (global-visual-line-mode 1)
#+end_src

** Window Decorations
I don't like have a menu-bar, tool-bar or scroll-bar, so we disable them.
#+begin_src emacs-lisp :tangle early-init.el
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Bell
I don't like the bell at all, so we can set ~ring-bell-function~ to ~ignore~
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

** Theme
I use the dracula theme, I think it looks pretty. I also like nord but I find it's contrast too low. However the comments in dracula are slightly too low contrast for me.
#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-dracula t)
    (doom-themes-org-config))
#+end_src

** Modeline
I use doom-modeline, but I haven't really considered alternatives at this point. I don't want it to tell me the buffer encoding, but I do want information on the indent settings for the buffer.
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init
    (doom-modeline-mode 1)
    :custom
    (doom-modeline-buffer-encoding nil)
    (doom-modeline-indent-info t))
#+end_src

~doom-modeline~ additionally needs the ~all-the-icons~ package to look nice.
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

** Rainbow Delimeters
Having a variaty of colours for brackets is very useful, especially in elisp. I've activated it for all programming modes, because I don't see a reason not to.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+end_src

** Dashboard
I use the dashboard package to make emacs have a prettier screen on startup. First we disable the builtin start screen
#+begin_src emacs-lisp :tangle early-init.el
  (setq inhibit-startup-message t)
#+end_src
and then install the [[github:emacs-dashboard/emacs-dashboard][Dashboard]] package
#+begin_src emacs-lisp
  (use-package dashboard
    :init
    (add-hook 'after-init-hook 'dashboard-refresh-buffer)
    :custom
    (dashboard-projects-backend 'projectile)
    (dashboard-items
     '((projects . 5)
       (agenda . 5)))
    (dashboard-filter-agenda-entry 'dashboard-filter-agenda-by-todo)
    (dashboard-agenda-sort-strategy '(time-up todo-state-up))
    (dashboard-startup-banner 'logo)
    (dashboard-center-content t)
    :config
    (dashboard-setup-startup-hook)
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
#+end_src

* Evil
As I'm a filthy vim user at heart, I have to install evil to make emacs remotely useable. Since I use emacs 28.1, I use the new ~undo-redo~ system. If the config is launched on something earlier than Emacs 28, I install ~undo-tree~, but I'm not familiar with it in detail.
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1)
    (if (>= emacs-major-version 28)
        (evil-set-undo-system 'undo-redo)))

  (if (< emacs-major-version 28)
      (use-package undo-tree
        :config
        (evil-set-undo-system 'undo-tree)))

  (use-package evil-collection
    :after evil
    :init (evil-collection-init))
#+end_src

* General
General is the package I use to set keybindings. I use the ~:keymaps 'override~ line so that my leader key isn't overwritten in certain modes. I spent ages trying to figure this out but [[https://emacs.stackexchange.com/a/52056][this stackexchange answer]] sorted it out for me. I've chosen to use ~SPC~ for my global leader and ~SPC m~ for a local leader. I might consider swapping my local leader to a single keypress to get to the bindings quicker.
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer dan/leader
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "C-SPC")
    (general-create-definer dan/local-leader
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC m"
      :global-prefix "C-SPC m"))
#+end_src

* Which-Key
I use which-key to get a visual indication of the keys I can press next. I find the default config to be suitable.
#+begin_src emacs-lisp
  (use-package which-key
    :config (which-key-mode 1))
#+end_src

* Helm
Helm is my preferred selection engine. I remap ~C-j~ and ~C-k~ to scroll as I am more used to this, and feels a lot more natural than going to the arrow keys.
#+begin_src emacs-lisp
  (use-package helm
    :general
    ("M-x" 'helm-M-x)
    ("C-x C-f" 'helm-find-files)
    (:keymaps 'helm-map "C-j" 'helm-next-line)
    (:keymaps 'helm-map "C-k" 'helm-previous-line)
    (dan/leader
      "." '(helm-find-files :which-key "Find Files"))
    :config (helm-mode 1))
#+end_src

* Magit
Magit is one of the main reasons I use emacs, it's so nice. I also set magit commit buffers to start in insert mode, as I always want to go into insert mode when I open them.
#+begin_src emacs-lisp
  (use-package magit
    :general
    (dan/leader
      "g" '(magit :which-key "Magit"))
    :hook
    (with-editor-mode . evil-insert-state))
  #+end_src

  I use a tiling WM (namely Qtile), so it's very annoying when ediff created new frames. Therefore we can disable it by explicitly loading the package
  #+begin_src emacs-lisp
  (use-package ediff
    :custom
    (ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src

* Dired
We need to create a binding to open dired
#+begin_src emacs-lisp
  (use-package dired-x
    :straight (:type built-in)
    :general
    (dan/leader
      "f d" '(dired :which-key "Dired")
      "f D" '(dired-jump :which-key "Dired Current Folder")))
#+end_src
