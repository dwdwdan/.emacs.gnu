
#+TITLE: Emacs Configuration
#+OPTIONS: html-style:nil num:nil
#+PROPERTY: header-args :tangle init.el
#+auto_tangle: t
Welcome to my emacs config, I'm relatively new to emacs and elisp so everything in here is likely to change. This document is available on github at [[github:dwdwdan/.emacs.gnu][dwdwdan/.emacs.gnu]] or on my website at [[https:dwdwdan.xyz/emacs.html][dwdwdan.xyz/emacs.html]].

* Performance
#+begin_src emacs-lisp
  (setq gc-cons-threshold 100000000) ;; 100mb
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src

** Native Compilation
We don't want to show any warnings from native-comp. Otherwise we get random popups when a new package is installed etc. We do log them though.
#+begin_src emacs-lisp
(setq native-comp-async-report-warnings-errors 'silent)
#+end_src

* System Variables
We set ~sync-dir~ based on OS. This mostly does nothing as I don't actually have emacs on any of my windows machines
#+begin_src emacs-lisp
  (defconst sync-dir 
    (cond ((eq system-type 'windows-nt)
           (setq sync-dir "C:/Users/Daniel Walters/Dropbox")
           ;; Windows-specific code goes here.
           )
          ((eq system-type 'gnu/linux)
           (setq sync-dir "~/Nextcloud")
           ;; Linux-specific code goes here.
           ))
    "Directory that files should be synced in. ~/Nextcloud by
    default on linux and C://Users.Daniel Walters/Dropbox on
    windows")

  (defconst config-file "README.org"
    "Emacs Configuration file name. This should be a file name
    relative to `config-dir'. This is used to open the config file
    with one button press")

  (defconst config-dir "~/.emacs.gnu"
    "Emacs Configuration Directory. This is where emacs config
    files should be stored")

  (defconst gtd-dir "~/Nextcloud/Org"
  "Directory that files for GTD are stored.")
#+end_src

* Straight.el
Run the bootstrap from the straight.el docs to make sure straight is installed.
#+begin_src emacs-lisp
  ;; Straight.el Bootstrap
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Configure straight
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
  (setq use-package-always-demand t)

#+end_src

#+begin_src emacs-lisp :tangle early-init.el
(setq package-enable-at-startup nil)
#+end_src

* Helper Functions
** Load config file
First we define a function to run an elisp file in ~config-dir.~
#+begin_src emacs-lisp
    ;; We need the s library to do some string comparison
      (use-package s)

      (defun dan/load-config-file(file)
  "Loads a config file FILE, stored in `config-dir'. Used as a
  helper function to load additional configuration files"
        (interactive "M")
        (unless (s-suffix? ".el" file)
          (setq file (concat file ".el")))
        (setq file (expand-file-name file config-dir))
        (unless (file-exists-p file)
          (error "File %s does not exist. It cannot be loaded." file))
        (load-file file))
#+end_src

** setq-plist-put
A macro to simplify using ~plist-put~. Stolen from [[https://emacs.stackexchange.com/a/39474][xuchunyang on the emacs stackexchange]].
#+begin_src emacs-lisp
  (defmacro setq-plist-put (plist &rest args)
    (let ((list nil))
      (while args
        (push `(setq ,plist (plist-put ,plist ,(pop args) ,(pop args))) list))
      (cons 'progn (nreverse list))))
#+end_src

* Daemon
For use in daemon mode starting with systemd, we need to set the path
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (when (daemonp)
      (exec-path-from-shell-initialize)))
#+end_src

* Cosmetics

** Fonts
I personally use the jetbrainsmono font for monospace, and liberation sans (which is similar to microsoft's arial) for variable width fonts.
#+begin_src emacs-lisp
    (defun dan/set-fonts (&optional frame)
  ;; If frame is nil, we aren't in daemon mode, so don't need to select the frame
      (when frame
        (select-frame frame))
      (set-face-attribute 'default nil :font "Jetbrainsmono-12")
      (set-face-attribute 'fixed-pitch nil :font "Jetbrainsmono-12")
      (set-face-attribute 'variable-pitch nil :font "Liberation Sans-12"))

    ;; If emacs is running in daemon mode, we need to wait until a frame has been created to set the font. Otherwise we can set the fonts now
    (if (daemonp)
        (add-hook 'after-make-frame-functions #'dan/set-fonts)
      (dan/set-fonts))
  #+end_src 

** Line Numbers
I like to have relative line numbers. I tend to move around using ~5j~ and similar more than using ~:143~ to jump to a specific line.
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode)
#+end_src

** Visual Line Mode
I prefer to use ~visual-line-mode~ rather than ~truncate-lines~. I think it looks nicer.
#+begin_src emacs-lisp
  (global-visual-line-mode 1)
#+end_src

** Window Decorations
I don't like have a menu-bar, tool-bar or scroll-bar, so we disable them.
#+begin_src emacs-lisp :tangle early-init.el
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Bell
I don't like the bell at all, so we can set ~ring-bell-function~ to ~ignore~
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

** Theme
I use the dracula theme, I think it looks pretty. I also like nord but I find it's contrast too low. However the comments in dracula are slightly too low contrast for me.
#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-dracula t)
    (doom-themes-org-config))
#+end_src

** Modeline
I use doom-modeline, but I haven't really considered alternatives at this point. I don't want it to tell me the buffer encoding, but I do want information on the indent settings for the buffer.
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init
    (doom-modeline-mode 1)
    :custom
    (doom-modeline-buffer-encoding nil)
    (doom-modeline-indent-info t))
#+end_src

~doom-modeline~ additionally needs the ~all-the-icons~ package to look nice.
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

** Rainbow Delimeters
Having a variaty of colours for brackets is very useful, especially in elisp. I've activated it for all programming modes, because I don't see a reason not to.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+end_src

** Dashboard
I use the dashboard package to make emacs have a prettier screen on startup. First we disable the builtin start screen
#+begin_src emacs-lisp :tangle early-init.el
  (setq inhibit-startup-message t)
#+end_src
and then install the [[github:emacs-dashboard/emacs-dashboard][Dashboard]] package
#+begin_src emacs-lisp
  (use-package dashboard
    :init
    (add-hook 'after-init-hook 'dashboard-refresh-buffer)
    :custom
    (dashboard-projects-backend 'projectile)
    (dashboard-items
     '((projects . 5)
       (agenda . 5)))
    (dashboard-filter-agenda-entry 'dashboard-filter-agenda-by-todo)
    (dashboard-agenda-sort-strategy '(time-up todo-state-up))
    (dashboard-startup-banner 'logo)
    (dashboard-center-content t)
    :config
    (dashboard-setup-startup-hook)
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
#+end_src

* Backups
I want emacs to put it's backups all in one place
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.backups"))
        backup-by-copying t)
#+end_src


* Evil
As I'm a filthy vim user at heart, I have to install evil to make emacs remotely useable. Since I use emacs 28.1, I use the new ~undo-redo~ system. If the config is launched on something earlier than Emacs 28, I install ~undo-tree~, but I'm not familiar with it in detail.
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1)
    (if (>= emacs-major-version 28)
        (evil-set-undo-system 'undo-redo)))

  (if (< emacs-major-version 28)
      (use-package undo-tree
        :config
        (evil-set-undo-system 'undo-tree)))

  (use-package evil-collection
    :after evil
    :init (evil-collection-init))
#+end_src

* General
General is the package I use to set keybindings. I use the ~:keymaps 'override~ line so that my leader key isn't overwritten in certain modes. I spent ages trying to figure this out but [[https://emacs.stackexchange.com/a/52056][this stackexchange answer]] sorted it out for me. I've chosen to use ~SPC~ for my global leader and ~SPC m~ for a local leader. I might consider swapping my local leader to a single keypress to get to the bindings quicker.
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer dan/leader
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "C-SPC")
    (general-create-definer dan/local-leader
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC m"
      :global-prefix "C-SPC m"))
#+end_src

* Which-Key
I use which-key to get a visual indication of the keys I can press next. I find the default config to be suitable.
#+begin_src emacs-lisp
  (use-package which-key
    :config (which-key-mode 1))
#+end_src

* Helm
Helm is my preferred selection engine. I remap ~C-j~ and ~C-k~ to scroll as I am more used to this, and feels a lot more natural than going to the arrow keys.
#+begin_src emacs-lisp
  (use-package helm
    :general
    ("M-x" 'helm-M-x)
    ("C-x C-f" 'helm-find-files)
    (:keymaps 'helm-map "C-j" 'helm-next-line)
    (:keymaps 'helm-map "C-k" 'helm-previous-line)
    (dan/leader
      "." '(helm-find-files :which-key "Find Files"))
    :config (helm-mode 1))
#+end_src

* Magit
Magit is one of the main reasons I use emacs, it's so nice. I also set magit commit buffers to start in insert mode, as I always want to go into insert mode when I open them.
#+begin_src emacs-lisp
  (use-package magit
    :general
    (dan/leader
      "g" '(magit :which-key "Magit"))
    :hook
    (with-editor-mode . evil-insert-state))
  #+end_src

  I use a tiling WM (namely Qtile), so it's very annoying when ediff created new frames. Therefore we can disable it by explicitly loading the package
  #+begin_src emacs-lisp
  (use-package ediff
    :custom
    (ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src

Forge allows me to interact with github/gitlab directly in emacs
#+begin_src emacs-lisp
  (use-package forge
    :after magit)
#+end_src


* Dired
We need to create a binding to open dired
#+begin_src emacs-lisp
  (use-package dired-x
    :straight (:type built-in)
    :general
    (dan/leader
      "f d" '(dired :which-key "Dired")
      "f D" '(dired-jump :which-key "Dired Current Folder")))
#+end_src

* Window and Buffer Bindings
Set keybinds to move around windows and switch buffers
#+begin_src emacs-lisp
  (defun dan/open-config()
    (interactive)
    (persp-switch ".emacs.gnu")
    (find-file (expand-file-name config-file config-dir)))

  (dan/leader
    "w" '(:ignore t :which-key "Window")
    "w s" '(evil-window-split :which-key "Horizontal Split")
    "w v" '(evil-window-vsplit :which-key "Vertical Split")
    "w h" '(evil-window-left :which-key "Move Left")
    "w j" '(evil-window-down :which-key "Move Down")
    "w k" '(evil-window-up :which-key "Move Up")
    "w l" '(evil-window-right :which-key "Move Right")
    "w q" '(evil-quit :which-key "Close Window")

    "f" '(:ignore t :which-key "Files")
    "f c" '(dan/open-config :which-key "Config File")
    "f f" '(find-files :which-key "Find Files")

    "o" '(:ignore t :which-key "Open Application")
    "o a" '(org-agenda :which-key "Agenda")

    "b" '(:ignore t :which-key "Buffer")
    "b b" '(helm-buffers-list :which-key "Switch Buffer")
    "b k" '(kill-this-buffer :which-key "Kill Buffer")
    "b r" '(revert-buffer :which-key "Revert Buffer"))
#+end_src

** Winner Mode
Winner mode is a minor mode that keeps track of window movements, and gives the ability to undo them. I mostly use it to give me the ability to maximise a window.
#+begin_src emacs-lisp
  (use-package winner
    :config
    (winner-mode)
    :general
    (dan/leader
      "w H" '(winner-undo :which-key "Undo Window Movement")
      "w L" '(winner-redo :which-key "Redo Window Movement")
      "w m" '(delete-other-windows :which-key "Maximise Window")))
#+end_src

* Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :init
    (projectile-mode 1)
    :general
    ("C-c p" 'projectile-command-map)
    (dan/leader
      "p" '(:ignore t :which-key "Projectile")
      "p p" '(projectile-switch-project :which-key "Switch Project")
      "p !" '(projectile-run-shell-command-in-root :which-key "Project Shell Command")
      "p f" '(projectile-find-file :which-key "Find File")
      "SPC" '(projectile-find-file :which-key "Projectile Find File"))
    :custom
    (projectile-project-search-path '("~/repos")))

  (use-package helm-projectile
    :after projectile)
#+end_src

* Completion (Company Mode)
Company mode is my completion engine, mainly because I don't know of any others. I have the idle delay and the minimum prefix length as quite small as I like completions to appear often and without delay.
#+begin_src emacs-lisp
  (use-package company
    :init (global-company-mode)
    :after 'lsp-mode
    :config
    (setq company-dabbrev-downcase 0
          company-idle-delay 0.1
          company-minimum-prefix-length 1)
    :custom-face
    (company-tooltip
     ((t (:family "JetBrainsmono"))))
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common)))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

* YASnippets
I use [[https://github.com/joaotavora/yasnippet][yasnippet]] for my snippets. I don't use any already existing snippet packages as I wanted to build my own. I keep a seperate git repository for my snippets [[https:github.com/dwdwdan/yasnippets][on github]].
#+begin_src emacs-lisp
  (use-package yasnippet
    :general
    (:keymaps 'yas-minor-mode-map
              "C-;" yas-maybe-expand)
    :config
    (yas-global-mode))
#+end_src

* Helpful
Helpful is a great package that makes the emacs help menus so much nicer. I basically replace the default emacs help commands with helpful, and then add them under ~SPC h~ as well.
#+begin_src emacs-lisp
  (use-package helpful
    :general
    ("C-h f" 'helpful-callable)
    ("C-h v" 'helpful-variable)
    ("C-h k" 'helpful-key)
    ("C-h C" 'helpful-command)
    ("C-h h" 'helpful-at-point)
    (dan/leader
      "h" '(:ignore t :which-key "Help")
      "h f" '(helpful-callable :which-key "Function")
      "h v" '(helpful-variable :which-key "Variable")
      "h k" '(helpful-key :which-key "Keybind")
      "h C" '(helpful-command :which-key "Command")
      "h h" '(helpful-at-point :which-key "Here")))
#+end_src

* Woman
Woman is an inbuilt package that allows you to browse Unix Man Pages
#+begin_src emacs-lisp
  (dan/leader
    "h m" '(woman :which-key "Man"))
#+end_src

* Perspective.el
[[https://github.com/nex3/perspective-el][perspective.el]] is a package that adds workspaces to emacs. It allows you to restrict the buffer list so it is shorter and only applies for a single 'perspective'. The package [[https://github.com/bbatsov/persp-projectile][perp-projectile]] adds integration to projectile, meaning that ~SPC p p~ will also create or switch to a new workspace.
#+begin_src emacs-lisp
  (use-package perspective
    :init
    (persp-mode)
    :custom
    (persp-suppress-no-prefix-key-warning t)
    :general
    (dan/leader
      "W" '(:ignore t :which-key "Workspaces")
      "W s" '(persp-switch :which-key "Switch Workspace")
      "W r" '(persp-rename :which-key "Rename Workspace")
      "W a" '(persp-add-buffer :which-key "Add buffer to Workspace")
      "W j" '(persp-next :which-key "Next Workspace")
      "W k" '(persp-prev :which-key "Previous Workspace")
      "W m" '(persp-merge :which-key "Merge Workspace")
      "W u" '(persp-unmerge :which-key "Unmerge Workspace")
      "W S" '(persp-state-save :which-key "Save Workspaces")
      "W L" '(persp-state-load :which-key "Load Workspaces")

      "b B" '(persp-switch-to-buffer :which-key "Global Switch Buffer")
      ))

  (use-package persp-projectile)
#+end_src

* Flycheck
[[https:www.flycheck.org][flycheck]] is a more modern syntax checking extension, compared to flymake, which is included in emacs.

#+begin_src emacs-lisp
  (use-package flycheck
    :config
    (global-flycheck-mode)
    :general
    (dan/leader
      "c" '(:ignore t :which-key "Checkers")
      "cl" '(flycheck-list-errors :which-key "List Errors")
      "cn" '(flycheck-next-error :which-key "Next Error")
      "cp" '(flycheck-previous-error :which-key "Previous Error")))

  (use-package flycheck-pos-tip
    :config
    (flycheck-pos-tip-mode))
#+end_src

* LSP
#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t)) 

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode))

  (setq lsp-ui-doc-show-with-cursor t
        lsp-ui-doc-position 'at-point
        lsp-ui-doc-delay 1
        lsp-ui-sideline-enable t)

  (use-package lsp-pyright
    :after lsp-mode
    :hook (python-mode . (lambda()
                           (require 'lsp-pyright)
                           (lsp-deferred))))

  (dolist (mode '(LaTeX-mode-hook
                  c-mode-hook))
    (add-hook mode 'lsp-deferred))


#+end_src

* Config for File Types
** Org
Org mode is configured in a seperate [[file:org.org][file]]. I didn't want the main file to get too big, or to have too many heading indents.
#+begin_src emacs-lisp
(load (expand-file-name "org.el" config-dir))
#+end_src

** pdf-tools
I don't want line numbers in pdf files, they're completely useless
#+begin_src emacs-lisp
  (defun dan/pdf-hook ()
    (display-line-numbers-mode -1)
    (auto-revert-mode 1))

  (use-package pdf-tools
    :hook
    (pdf-view-mode . dan/pdf-hook)
    :init
    (pdf-tools-install))
#+end_src

** auctex
#+begin_src emacs-lisp
  (use-package tex
    :straight auctex
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq preview-scale-function 1.4)
    (setq preview-auto-reveal t)
    :hook
    (LaTeX-mode . LaTeX-math-mode)
    (LaTeX-mode . mixed-pitch-mode)
    (LaTeX-mode . TeX-source-correlate-mode))
#+end_src


*** Reftex
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
#+end_src

My University uses the harvard style, so I need reftex to give me the choice of styles
#+begin_src emacs-lisp
(setq reftex-cite-format 'biblatex)
#+end_src


** R
#+begin_src emacs-lisp
  (use-package ess
    :custom
    (ess-indent-with-fancy-comments nil))
#+end_src


* Vterm
[[https://github.com/akermu/emacs-libvterm][Vterm]] is my terminal emulator of choice for use inside of emacs
#+begin_src emacs-lisp
  (use-package vterm
    :general
    (dan/leader
      "o t" '(vterm-other-window :which-key "Vterm")))
#+end_src

* Elfeed
[[https://github.com/skeeto/elfeed][Elfeed]] is a package for reading RSS feeds. I currently use the default config but I may change some things later
#+begin_src emacs-lisp
          (use-package elfeed
            :general
            (dan/leader
              "o r" '(elfeed :which-key "RSS reader"))
            :hook
            ;; Don't display line numbers when reading an RSS document
            (elfeed-show-mode . (lambda () (display-line-numbers-mode -1)))
            ;; Automatically update RSS feeds every 10 minutes
            (emacs-startup . (lambda () (run-at-time 5 600 'elfeed-update)))
            :custom
            (elfeed-use-curl t)
            (elfeed-curl-extra-arguments '("--insecure")))

          (use-package elfeed-protocol)

    (setq elfeed-feeds
    '(("owncloud+https://dan@nextcloud.dwdwdan.xyz" :use-authinfo t)))
    (setq elfeed-protocol-enabled-protocols '(owncloud))
    (elfeed-protocol-enable)
#+end_src

* Mu4e
#+begin_src emacs-lisp
  (use-package mu4e
    :straight (:type built-in)
    :load-path "/usr/share/emacs/site-lisp/mu4e"
    :custom
    (mu4e-change-filenames-when-moving t)
    (mu4e-confirm-quit nil)
    (mu4e-update-interval (* 10 60))
    (mu4e-get-mail-command "mbsync -a")
    (mu4e-maildir "~/.mail")

    (mu4e-drafts-folder "/personal/Drafts")
    (mu4e-sent-folder "/personal/Sent")
    (mu4e-trash-folder "/personal/Deleted")
    (mu4e-refile-folder "/personal/Archive")

    (user-mail-address "dan.walters5@outlook.com")

    (mu4e-maildir-shortcuts
     '((:maildir "/personal/Inbox" :key ?i)))

    (mu4e-bookmarks
     '(( :name  "Unread messages"
         :query "flag:unread AND NOT flag:trashed AND NOT maildir:/personal/Archive AND NOT maildir:/personal/Deleted"
         :key ?u)
       ( :name "Today's messages"
         :query "date:today..now"
         :key ?t)
       ( :name "Last 7 days"
         :query "date:7d..now"
         :hide-unread t
         :key ?w)
       ( :name "Messages with images"
         :query "mime:image/*"
         :key ?p)))
    (message-send-mail-function 'smtpmail-send-it)
    (smtpmail-smtp-server "smtp.office365.com")
    :general
    (dan/leader
      "o m" '(mu4e :which-key "Mail")
      "o M" '(mu4e-compose-new :which-key "Compose Mail"))
    (dan/leader
      :keymaps '(mu4e-headers-view mu4e-view-mode)
      "n n" '(mu4e-org-store-and-capture :which-key "Org Capture")))

  (use-package org-msg
    :init
    (setq mail-user-agent 'mu4e-user-agent)
    :custom
    (org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil d:nil num:nil tex:dvipng")
    (org-msg-startup "hidestars indent inlineimages")
    (org-msg-convert-citation t)
    :general
    (dan/local-leader
      :keymaps 'org-msg-edit-mode-map
      "s" '(message-goto-subject :which-key "Subject")
      "b" '(org-msg-goto-body :which-key "Body")
      "a" '(org-msg-attach :which-key "Attach"))
    :hook
    (org-msg-edit-mode . (lambda() (make-variable-buffer-local 'org-html-head)
                           (setq-local org-html-head nil))))

  (mu4e t)
  (org-msg-mode)
#+end_src

* Ement (Matrix)
#+begin_src emacs-lisp
    (use-package ement
      :straight '(:type git :host github :repo "alphapapa/ement.el")

      :custom
      (ement-save-sessions t)

      :hook
      ;; Don't display line numbers when reading an RSS document
      (ement-room-mode . (lambda () (display-line-numbers-mode -1)))

      :general
      (dan/leader
        "o M" '(ement-room-list :which-key "Matrix"))

      (general-define-key
       :states '(normal)
       :keymaps 'ement-room-mode-map
       "?" '(ement-room-transient :which-key "Help")
       "RET" '(ement-room-send-message :which-key "Compose")
       "S-RET" '(ement-room-write-reply :which-key "Reply"))

      (dan/local-leader
        :keymaps '(ement-room-mode-map ement-room-list-mode-map)
        "l" '(ement-room-list :which-key "Go to Room List")
  "n" '(ement-notify-switch-to-notifications-buffer :which-key "Go to Notification"))


      (general-define-key
       :states '(normal)
       :keymaps 'ement-room-list-mode-map
       "RET" '(ement-room-list-RET :which-key "View Room")
       "S-SPC" '(ement-room-list-next-unread :which-key "Next Unread"))
      )
#+end_src


* EAF
#+begin_src emacs-lisp
(use-package eaf
    :straight (eaf
               :type git
               :host github
               :repo "emacs-eaf/emacs-application-framework"
               :files ("*.el" "*.py" "core" "app" "*.json")
               :includes (eaf-pdf-viewer eaf-browser eaf-demo eaf-file-sender eaf-file-browser eaf-airshare eaf-camera) ; Straight won't try to search for these packages when we make further use-package invocations for them
               :pre-build (("python" "install-eaf.py" "--install" "browser" "demo" "file-sender" "file-browser" "airshare" "camera"))
               )
    :init (evil-set-initial-state 'eaf-mode 'emacs)) ; Evil mode doesn't work well with eaf keybindings.
#+end_src

#+begin_src emacs-lisp
  (use-package eaf-browser)
  (use-package eaf-camera)
  (use-package eaf-file-sender)
  (use-package eaf-file-browser)
  (use-package eaf-airshare)
#+end_src

* Notify at end of loading
#+begin_src emacs-lisp
  (require 'notifications)
  (notifications-notify
   :title "Emacs Config Loaded"
   :body "Press Super+e to Open")
#+end_src

