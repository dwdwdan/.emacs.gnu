#+TITLE: Emacs Configuration
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

* Early init.el
:PROPERTIES:
:header-args: :tangle early-init.el
:END:

We don't want emacs to load it's default packaging system
#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
#+end_src

** Cosmetics
We can tell emacs not to load the startup message, menu-bar etc in
~early-init.el~ so it doesn't load them at all. 
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

#+end_src

* Init.el
:PROPERTIES:
:header-args: :tangle init.el
:END:
** Fonts
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Jetbrainsmono-12")
  (set-face-attribute 'fixed-pitch nil :font "Jetbrainsmono-12")
  (set-face-attribute 'variable-pitch nil :font "Liberation Sans-12")
  #+end_src 

** Line Numbers
I like to have relative line numbers
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
#+end_src

** System Variables
We set ~sync-dir~ based on OS. This mostly does nothing as I don't actually have emacs on any of my windows machines
#+begin_src emacs-lisp
  (defconst sync-dir 
      (cond ((eq system-type 'windows-nt)
             (setq sync-dir "C:/Users/Daniel Walters/Dropbox")
             ;; Windows-specific code goes here.
             )
            ((eq system-type 'gnu/linux)
             (setq sync-dir "~/Nextcloud")
             ;; Linux-specific code goes here.
             ))
  "Directory that files should be synced in. ~/Nextcloud by default on linux and C://Users.Daniel Walters/Dropbox on windows")

      (defconst config-file "~/.emacs.gnu/emacs.org"
    "Emacs Configuration file location. This is used to open the config file with one button press")
#+end_src

** Straight.el
Run the bootstrap from the straight.el docs to make sure straight is installed.
#+begin_src emacs-lisp
  ;; Straight.el Bootstrap
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Configure straight
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)

#+end_src

** General
General is the package I use to set keybindings
#+begin_src emacs-lisp
    (use-package general
      :config
      (general-create-definer my/leader
        :states '(normal insert visual emacs)
        :prefix "SPC"
        :global-prefix "C-SPC")
      (general-create-definer my/local-leader
        :states '(normal insert visual emacs)
        :prefix "SPC m"
  :global-prefix "C-SPC m"))

#+end_src

** Evil
The most important package of all, the one that makes emacs actually useable.
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :init (evil-collection-init))
#+end_src

** Helm
#+begin_src emacs-lisp
  (use-package helm
    :general
    ("M-x" 'helm-M-x)
    ("C-x C-f" 'helm-find-files)
    (my/leader
      "." '(helm-find-files :which-key "Find Files")
      "f" '(helm-find-files :which-key "Find Files"))
    :config (helm-mode 1))
#+end_src

** Magit
#+begin_src emacs-lisp
  (use-package magit
    :general
    (my/leader
      "g" '(magit :which-key "Magit"))
    :hook
    (with-editor-mode . evil-insert-state))
#+end_src

** Which-key
#+begin_src emacs-lisp
  (use-package which-key
    :config (which-key-mode 1))
#+end_src

** Cosmetics
At the moment I'm using gruvbox but I might change at some point.
#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-gruvbox t)
    (doom-themes-org-config))
#+end_src

I currently use a relatively-default doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init
    (doom-modeline-mode 1)
    :custom
    (doom-modeline-buffer-encoding nil)
    (doom-modeline-indent-info t))
#+end_src

** pdf-tools
I don't want line numbers in pdf files, they're completely useless
#+begin_src emacs-lisp
  (defun my/pdf-hook ()
    (display-line-numbers-mode -1))

  (use-package pdf-tools
    :hook
    (pdf-view-mode . my/pdf-hook)
    :init
    (pdf-tools-install))

#+end_src

** Windows and buffers
Set keybinds to move around windows and switch buffers
#+begin_src emacs-lisp
    (my/leader
      "w" '(:ignore t :which-key "Window")
      "w s" '(evil-window-split :which-key "Horizontal Split")
      "w v" '(evil-window-vsplit :which-key "Vertical Split")
      "w h" '(evil-window-left :which-key "Move Left")
      "w j" '(evil-window-down :which-key "Move Down")
      "w k" '(evil-window-up :which-key "Move Up")
      "w l" '(evil-window-right :which-key "Move Right")
      "w q" '(evil-quit :which-key "Close Window")

      "b" '(:ignore t :which-key "Buffer")
      "b b" '(switch-to-buffer :which-key "Switch Buffer")
      "b r" '(revert-buffer :which-key "Revert Buffer"))

#+end_src

** auctex
#+begin_src emacs-lisp
  (use-package tex
    :straight auctex
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t))

#+end_src

** org
#+begin_src emacs-lisp
  (setq org-directory (concat sync-dir "/Org")
        org-roam-directory (concat sync-dir "/OrgRoam")
        org-ellipsis " ▼"
        org-superstar-headline-bullets-list '("◉" "○")
        org-agenda-span 7
        org-agenda-start-on-weekday 1
        org-agenda-start-day "+0d"
        org-log-into-drawer t
        org-startup-with-latex-preview t
        org-agenda-files `(,org-directory))

  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  (defun my/org-config ()
    (dolist (face '((org-level-1 . 1.5)
                    (org-level-2 . 1.4)
                    (org-level-3 . 1.3)
                    (org-level-4 . 1.2)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.05)))
      (set-face-attribute (car face) nil :weight 'bold :height (cdr face)))

    (set-face-attribute 'org-document-title nil :height 300)
    (set-face-attribute 'org-block nil :foreground nil :background "#353848" :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil :background "#353848" :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

    (setq org-todo-keywords '((sequence "TODO(t)" "IN PROGRESS(p)" "WAITING(w)" "|" "DONE(d!)" "CANCELLED(c!)")))
    (setq org-refile-targets `((,(concat org-directory "/archive.org") :maxlevel . 2)
                               (,(concat org-directory "/todo.org") :maxlevel . 1)))
    (setq org-capture-templates `(("t" "Todo" entry (file ,(concat org-directory "/inbox.org")) "* TODO %?\n %U\n %a\n %i" :empty-lines 1))))

  (defun my/org-hook ()
    (variable-pitch-mode 1)
    (org-indent-mode)
    (display-line-numbers-mode -1))


  (use-package org
    :straight (:type built-in)
    :hook
    (org-mode . my/org-hook)
    :general
    (my/leader
      "n" '(:ignore t :which-key "Notes")
      "n c" '(org-capture :which-key "Org Capture"))
    :config
    (my/org-config))

  (use-package org-fragtog
    :hook (org-mode . org-fragtog-mode))

  (use-package org-superstar
    :hook (org-mode . org-superstar-mode))
  (use-package htmlize)
#+end_src

** Projectile
#+begin_src emacs-lisp
    (use-package projectile
      :init
      (projectile-mode 1)
      :general
      ("C-c p" 'projectile-command-map)
      (my/leader
        "p" '(:ignore t :which-key "Projectile")
        "p p" '(projectile-switch-project :which-key "Switch Project")
        "p !" '(projectile-run-shell-command-in-root :which-key "Project Shell Command")
        "p f" '(projectile-find-file :which-key "Find File")
        "SPC" '(projectile-find-file :which-key "Projectile Find File"))
      :custom
      (projectile-project-search-path '("~/repos")))

    (use-package helm-projectile
      :after projectile)

    (use-package org-projectile
      :config
      (progn
        (org-projectile-per-project)
        (setq org-projectile-per-project-filepath "todos.org")
        (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
        (push (org-projectile-project-todo-entry) org-capture-templates))
      )
#+end_src

** Company Mode
#+begin_src emacs-lisp
  (use-package company
    :init (global-company-mode)
    :config
    (setq company-dabbrev-downcase 0
          company-idle-delay 0.1
          company-minimum-prefix-length 2)
    :custom-face
        (company-tooltip
            ((t (:family "JetBrainsmono")))))
#+end_src

** YASnippets

#+begin_src emacs-lisp
(use-package yasnippet
:config
(yas-global-mode))
#+end_src

** Helpful
Helpful is a great package that makes the emacs help menus so much nicer. I basically replace the default emacs help commands with helpful, and then add them under "SPC h" as well.
#+begin_src emacs-lisp
  (use-package helpful
    :general
    ("C-h f" 'helpful-callable)
    ("C-h v" 'helpful-variable)
    ("C-h k" 'helpful-key)
    ("C-h C" 'helpful-command)
    ("C-h h" 'helpful-at-point)
    (my/leader
      "h" '(:ignore t :which-key "Help")
      "h f" '(helpful-callable :which-key "Function")
      "h v" '(helpful-variable :which-key "Variable")
      "h k" '(helpful-key :which-key "Keybind")
      "h C" '(helpful-command :which-key "Command")
      "h h" '(helpful-at-point :which-key "Here")))
#+end_src

** Rainbow Delimeters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+end_src

