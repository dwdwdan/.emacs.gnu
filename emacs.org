#+TITLE: Emacs Configuration
#+SETUPFILE: /home/dan/repos/org-html/setup.setup
#+OPTIONS: html-style:nil
#+auto_tangle: t
Welcome to my emacs config, I'm relatively new to emacs and elisp so everything in here is likely to change. This document is available on github at [[github:dwdwdan/.emacs.gnu][dwdwdan/.emacs.gnu]] or on my website at [[https:dwdwdan.xyz/emacs.html][dwdwdan.xyz/emacs.html]].
* Early init.el
:PROPERTIES:
:header-args: :tangle early-init.el
:END:

We don't want emacs to load it's default packaging system
#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
#+end_src

** Cosmetics
We can tell emacs not to load the startup message, menu-bar etc in ~early-init.el~ so it doesn't load them at all. 
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

#+end_src

* Init.el
:PROPERTIES:
:header-args: :tangle init.el
:END:
** System Variables
We set ~sync-dir~ based on OS. This mostly does nothing as I don't actually have emacs on any of my windows machines
#+begin_src emacs-lisp
  (defconst sync-dir 
    (cond ((eq system-type 'windows-nt)
           (setq sync-dir "C:/Users/Daniel Walters/Dropbox")
           ;; Windows-specific code goes here.
           )
          ((eq system-type 'gnu/linux)
           (setq sync-dir "~/Nextcloud")
           ;; Linux-specific code goes here.
           ))
    "Directory that files should be synced in. ~/Nextcloud by
    default on linux and C://Users.Daniel Walters/Dropbox on
    windows")

  (defconst config-file "emacs.org"
    "Emacs Configuration file name. This should be a file name
    relative to `config-dir'. This is used to open the config file
    with one button press")

  (defconst config-dir "~/.emacs.gnu"
    "Emacs Configuration Directory. This is where emacs config
    files should be stored")

  (defconst gtd-dir "~/Nextcloud/Org/GTD"
  "Directory that files for GTD are stored.")
#+end_src

** Straight.el
Run the bootstrap from the straight.el docs to make sure straight is installed.
#+begin_src emacs-lisp
  ;; Straight.el Bootstrap
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Configure straight
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
  (setq use-package-always-demand t)

#+end_src

** Helper functions
Load a config file stored in the config directory
#+begin_src emacs-lisp
    ;; We need the s library to do some string comparison
      (use-package s)

      (defun dan/load-config-file(file)
  "Loads a config file FILE, stored in `config-dir'. Used as a
  helper function to load additional configuration files"
        (interactive "M")
        (unless (s-suffix? ".el" file)
          (setq file (concat file ".el")))
        (setq file (expand-file-name file config-dir))
        (unless (file-exists-p file)
          (error "File %s does not exist. It cannot be loaded." file))
        (load-file file))
#+end_src

Simpler Macro for ~plist-put~. Stolen from [[https://emacs.stackexchange.com/a/39474][xuchunyang on the emacs stackexchange]] 
#+begin_src emacs-lisp
  (defmacro setq-plist-put (plist &rest args)
    (let ((list nil))
      (while args
        (push `(setq ,plist (plist-put ,plist ,(pop args) ,(pop args))) list))
      (cons 'progn (nreverse list))))
#+end_src

** Fonts
#+begin_src emacs-lisp
  (defun dan/set-fonts (&optional frame)
;; If frame is nil, we aren't in daemon mode, so don't need to select the frame
    (when frame
      (select-frame frame))
    (set-face-attribute 'default nil :font "Jetbrainsmono-12")
    (set-face-attribute 'fixed-pitch nil :font "Jetbrainsmono-12")
    (set-face-attribute 'variable-pitch nil :font "Liberation Sans-12"))

  (if (daemonp)
      (add-hook 'after-make-frame-functions #'dan/set-fonts)
    (dan/set-fonts))
  #+end_src 

** Line Numbers
I like to have relative line numbers
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode)
#+end_src

** Visual Line Mode
I prefer to use ~visual-line-mode~ rather than ~truncate-lines~. I think it looks nicer.
#+begin_src emacs-lisp
  (global-visual-line-mode 1)
#+end_src


** General
General is the package I use to set keybindings. We use the ~:keymaps 'override~ line so that my leader key isn't overwritten in certain modes. I spent ages trying to figure this out but [[https://emacs.stackexchange.com/a/52056][this stackexchange answer]] sorted it out for me.
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer dan/leader
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "C-SPC")
    (general-create-definer dan/local-leader
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC m"
      :global-prefix "C-SPC m"))
#+end_src

** Evil
The most important package of all, the one that makes emacs actually useable.
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :init (evil-collection-init))
#+end_src

** Helm
Helm is my preferred selection engine. I remap ~C-j~ and ~C-k~ to scroll as I am more used to this, and feels a lot more natural than going to the arrow keys.
#+begin_src emacs-lisp
  (use-package helm
    :general
    ("M-x" 'helm-M-x)
    ("C-x C-f" 'helm-find-files)
    (:keymaps 'helm-map "C-j" 'helm-next-line)
    (:keymaps 'helm-map "C-k" 'helm-previous-line)
    (dan/leader
      "." '(helm-find-files :which-key "Find Files"))
    :config (helm-mode 1))
#+end_src

** Magit
#+begin_src emacs-lisp
  (use-package magit
    :general
    (dan/leader
      "g" '(magit :which-key "Magit"))
    :hook
    (with-editor-mode . evil-insert-state))
#+end_src

** Which-key
#+begin_src emacs-lisp
  (use-package which-key
    :config (which-key-mode 1))
#+end_src

** Cosmetics
At the moment I'm using dracula but I might change at some point.
#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-dracula t)
    (doom-themes-org-config))
#+end_src

I currently use a relatively-default doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init
    (doom-modeline-mode 1)
    :custom
    (doom-modeline-buffer-encoding nil)
    (doom-modeline-indent-info t))
#+end_src

** pdf-tools
I don't want line numbers in pdf files, they're completely useless
#+begin_src emacs-lisp
  (defun dan/pdf-hook ()
    (display-line-numbers-mode -1))

  (use-package pdf-tools
    :hook
    (pdf-view-mode . dan/pdf-hook)
    :init
    (pdf-tools-install))

#+end_src

** Windows and buffers
Set keybinds to move around windows and switch buffers
#+begin_src emacs-lisp
  (defun dan/open-config()
    (interactive)
    (persp-switch ".emacs.gnu")
    (find-file (expand-file-name config-file config-dir)))

  (dan/leader
    "w" '(:ignore t :which-key "Window")
    "w s" '(evil-window-split :which-key "Horizontal Split")
    "w v" '(evil-window-vsplit :which-key "Vertical Split")
    "w h" '(evil-window-left :which-key "Move Left")
    "w j" '(evil-window-down :which-key "Move Down")
    "w k" '(evil-window-up :which-key "Move Up")
    "w l" '(evil-window-right :which-key "Move Right")
    "w q" '(evil-quit :which-key "Close Window")

    "f" '(:ignore t :which-key "Files")
    "f c" '(dan/open-config :which-key "Config File")
    "f f" '(find-files :which-key "Find Files")

    "o" '(:ignore t :which-key "Open Application")
    "o a" '(org-agenda :which-key "Agenda")

    "b" '(:ignore t :which-key "Buffer")
    "b b" '(helm-buffers-list :which-key "Switch Buffer")
    "b k" '(kill-this-buffer :which-key "Kill Buffer")
    "b r" '(revert-buffer :which-key "Revert Buffer"))
#+end_src

** Dired
We need to create a binding to open dired
#+begin_src emacs-lisp
  (use-package dired-x
    :straight (:type built-in)
    :general
    (dan/leader
      "f d" '(dired :which-key "Dired")
      "f D" '(dired-jump :which-key "Dired Current Folder")))
#+end_src

** auctex
#+begin_src emacs-lisp
  (use-package tex
    :straight auctex
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t))
#+end_src

*** Auto Compiling
I want emacs to automatically compile on save. We create a minor mode for this, stolen from https://rtime.ciirc.cvut.cz/~sojka/blog/compile-on-save/
#+begin_src emacs-lisp
(defun compile-on-save-start ()
  (let ((buffer (compilation-find-buffer)))
    (unless (get-buffer-process buffer)
      (recompile))))

(define-minor-mode compile-on-save-mode
  "Minor mode to automatically call `recompile' whenever the
current buffer is saved. When there is ongoing compilation,
nothing happens."
  :lighter " CoS"
    (if compile-on-save-mode
    (progn  (make-local-variable 'after-save-hook)
        (add-hook 'after-save-hook 'compile-on-save-start nil t))
      (kill-local-variable 'after-save-hook)))
#+end_src

I don't want to actually show the compilation buffer, so we use this snippet which is a part of https://stackoverflow.com/a/60990667
#+begin_src emacs-lisp
(defadvice compilation-start
  (around inhibit-display
      (command &optional mode name-function highlight-regexp))
  (if (not (string-match "^\\(find\\|grep\\)" command))
      (cl-letf ((display-buffer   #'ignore)
                (set-window-point #'ignoreco)
                (goto-char        #'ignore))
        (save-window-excursion
          ad-do-it))
    ad-do-it))

(ad-activate 'compilation-start)
#+end_src

#+begin_src emacs-lisp
(defun dan/latex-hook()
  (compile-on-save-mode 1)
  (setq-local compile-command "latexmk -interaction=nonstopmode")
  (compile compile-command))

(add-hook 'LaTeX-mode-hook 'dan/latex-hook)
(add-hook 'pdf-view-mode-hook 'auto-revert-mode 1)
#+end_src

** org
My org mode configuration is probably the largest section of my emacs configuration.

#+begin_src emacs-lisp
  (setq org-directory (concat sync-dir "/Org")
        org-ellipsis " ▼"
        org-hide-emphasis-markers t
        org-log-into-drawer t
        org-startup-with-latex-preview t)
#+end_src

*** Agenda
I want my org agenda to always start on the previous monday, and show 7 days (i.e. show the full current week). I also want agenda to read from any file in my org directory.
#+begin_src emacs-lisp
  (setq org-agenda-span 7
        org-agenda-start-on-weekday 1
        org-agenda-start-day "+0d")
  #+end_src

I need the package ~evil-org~ to add evil keys to the agenda. I don't know why this isn't included in ~evil-collection~
#+begin_src emacs-lisp
  (use-package evil-org
    :after org
    :hook (org-mode . evil-org-mode)
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

*** GTD
  We want to add all gtd files to ~org-agenda-files~.
#+begin_src emacs-lisp
  (dolist (file '("gtd.org" "inbox.org" "tickler.org"))
    (add-to-list 'org-agenda-files (expand-file-name file gtd-dir)))
#+end_src

*** Faces
**** Heading Size
First we set the headings to be bigger than the standard text size. we have to use floats for these so that emacs uses a scale factor rather than setting the height explicitly (the title was very weird being only 3 high).
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (dolist (face '((org-document-title . 3.0)
                    (org-level-1 . 1.5)
                    (org-level-2 . 1.4)
                    (org-level-3 . 1.3)
                    (org-level-4 . 1.2)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.05)))
      (set-face-attribute (car face) nil :weight 'bold :height (cdr face))))
#+end_src

**** Mixed Pitch
The mixed pitch package sets certain elements in a document to be fixed pitch and others to variable. This is very useful in org mode, so I can have a variable pitch font for most of the body, but a fixed pitch font for code blocks.
#+begin_src emacs-lisp
  (use-package mixed-pitch
  :hook (org-mode . mixed-pitch-mode))
#+end_src

**** Todo and capture
#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "IN PROGRESS(p)" "WAITING(w)" "|" "DONE(d!)" "CANCELLED(c!)")
          (sequence "NO IDEA(h)" "KINDA(j)" "NEEDS PRACTICE(k)" "|" "GOT IT(l!)")))
  (setq org-refile-targets `((,(concat org-directory "/archive.org") :maxlevel . 2)
                             (,(concat org-directory "/todo.org") :maxlevel . 1)))
  (setq org-capture-templates `(("t" "Todo" entry (file ,(concat org-directory "/inbox.org")) "* TODO %?\n %U\n %a\n %i" :empty-lines 1)))
#+end_src

Whenever I refile (archive) a todo, I want to save all buffers. By default emacs will simply move the item, but not save the files. This essentially means that if emacs is forced to shutdown the refile will not have happened.
#+begin_src emacs-lisp
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src
*** Use-package
This block actually requires org mode and activates the hooks.
#+begin_src emacs-lisp
  (use-package org
    :straight (:type built-in)
    :hook
    (org-mode . org-indent-mode)
    (org-mode . (lambda() (display-line-numbers-mode -1))))
#+end_src

*** Mappings
So far I just have org capture bound outside of org mode itself, though I may add additional bindings for finding a notes file or similar. I also have set local mappings for tangling and exporting org files.
#+begin_src emacs-lisp
  (dan/leader
    "n" '(:ignore t :which-key "Notes")
    "n n" '(org-capture :which-key "Org Capture")
    "n c" '(org-capture :which-key "Org Capture"))
  (dan/local-leader
    :keymaps 'org-mode-map
    "T" '(org-babel-tangle :which-key "Tangle")
    "e" '(org-export-dispatch :which-key "Export")
    "l" '(org-insert-link :which-key "Insert Link")
    "t" '(org-todo :which-key "Todo"))
#+end_src

*** Fragtog
Org fragtog will render latex previews when the cursor is outside them. It will turn off the rendering when the cursor enters the block, allowing easier editing.
#+begin_src emacs-lisp
  (use-package org-fragtog
    :hook (org-mode . org-fragtog-mode))
#+end_src

We also want to scale up latex renders to better match the font size
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq-plist-put org-format-latex-options :scale 1.5))
#+end_src

*** Superstar
Org superstar is a package that turns the * in headers into nicer characters. The variable ~org-superstar-headline-bullets-list~ sets the characters to use.
#+begin_src emacs-lisp
  (use-package org-superstar
    :hook
    (org-mode . org-superstar-mode)
    :config
    (setq org-superstar-headline-bullets-list '("◉" "○")
          org-superstar-leading-bullet ?\s))
#+end_src

*** Export
I don't want a html postamble
#+begin_src emacs-lisp
(setq org-html-postamble nil)
#+end_src

I want a command to export to html and send to my website
#+begin_src emacs-lisp
  (defconst server-name "server"
    "A string representing the ssh location of the web server.
                    For example, if you run `ssh user@123.456.789.123` to ssh into the server, `server-name` should be set to `user@123.456.789.123`")

  (defconst server-website-location "/var/www/personal/"
    "A string representing the file path on the web server where you wnat exported files to be stored.
                     This should contain a trailing /")

  (defconst web-address "https://dwdwdan.xyz/"
    "A string representing the url to the web server. This should lead to the folder where exported files are stored
                    This should contain a trailing /, as well as the protocol to be used")


  (defun dan/export-to-html-server (&optional should-open-in-browser)
    "Export the current org file to html and copy to web server.
It will use the values of `server-name’, `server-website-location’ and `web-address’ to upload using scp.

If invoked using a prefix argument or with SHOULD-OPEN-IN-BROWSER non-nil it will also open the exported file in a web browser using `browse-url-xdg-open'"
    (interactive "P")
    ;; org-html-export-to-html returns the exported file-name
    (setq file-name (org-html-export-to-html))
    ;; we use a big concat to form the command we need to run
    (setq shell-command-to-run (concat "scp " file-name " " server-name ":" server-website-location file-name))
    (shell-command shell-command-to-run)
    (setq uploaded-web-address (concat web-address file-name))
    ;; copy the web address it's available at to the clipboard
    (kill-new uploaded-web-address)
    (when should-open-in-browser
      ;; if should-open-in-browser is non-nil, we want to open it
      (browse-url-xdg-open uploaded-web-address))
    ;; send a message to tell the user where to find it
    (message (concat "Viewable at " uploaded-web-address ".
  Address has been copied to clipboard.")))
#+end_src
*** Export
I don't want a html postamble
#+begin_src emacs-lisp
(setq org-html-postamble nil)
#+end_src
*** Htmlize
Htmlize seems to be a depency to export to html properly.
#+begin_src emacs-lisp
  (use-package htmlize)
#+end_src

*** Auto Tangle
org-auto-tangle will automatically tangle an org file if it has ~#+auto_tangle~ set to ~t~
#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :hook
    (org-mode . org-auto-tangle-mode))
#+end_src

*** Publish
I use org publish to publish my emacs config to my website.
#+begin_src emacs-lisp
  (setq org-publish-project-alist (list
                                   (list "emacs config"
                                         :base-directory "~/.emacs.gnu"
                                         :publishing-directory "/ssh:server:/var/www/personal"
                                         ;;:publishing-directory "~/tmp"
                                         :base-extension "org"
                                         :publishing-function 'org-html-publish-to-html
                                         :recursive nil)))
#+end_src

*** Github Links
[[https://github.com/lygaret/emacs.d/blob/rewrite/site-lisp/org-github-links.el][org-github-links.el]] is a package/script to add easy github links to org. They have the form

#+begin_example
github:user/repo
github:user/repo@a738b4b8
github:user/repo#45
#+end_example

#+begin_src emacs-lisp
(dan/load-config-file "org-github-links")
#+end_src

** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :init
    (projectile-mode 1)
    :general
    ("C-c p" 'projectile-command-map)
    (dan/leader
      "p" '(:ignore t :which-key "Projectile")
      "p p" '(projectile-switch-project :which-key "Switch Project")
      "p !" '(projectile-run-shell-command-in-root :which-key "Project Shell Command")
      "p f" '(projectile-find-file :which-key "Find File")
      "SPC" '(projectile-find-file :which-key "Projectile Find File"))
    :custom
    (projectile-project-search-path '("~/repos")))

  (use-package helm-projectile
    :after projectile)


  (defun dan/existing-org-projectile-todo-files ()
    (setq existing-files nil)
    (dolist (todo-file (org-projectile-todo-files) existing-files)
      (when (file-exists-p todo-file)
        (setq existing-files (cons todo-file existing-files)))))

  (use-package org-projectile
    :config
    (org-projectile-per-project)
    (setq org-projectile-per-project-filepath "todos.org")
    (setq org-agenda-files (append org-agenda-files (dan/existing-org-projectile-todo-files)))
    (push (org-projectile-project-todo-entry) org-capture-templates)
    )
#+end_src

** Company Mode
Company mode is my completion engine, mainly because I don't know of any others. I have the idle delay and the minimum prefix length as quite small as I like completions to appear often and without delay.
#+begin_src emacs-lisp
  (use-package company
    :init (global-company-mode)
    :config
    (setq company-dabbrev-downcase 0
          company-idle-delay 0.1
          company-minimum-prefix-length 1)
    :custom-face
    (company-tooltip
     ((t (:family "JetBrainsmono")))))
#+end_src

** YASnippets
I use [[https://github.com/joaotavora/yasnippet][yasnippet]] for my snippets. I don't use any already existing snippet packages as I wanted to build my own. I keep a seperate git repository for my snippets [[https:github.com/dwdwdan/yasnippets][on github]].
#+begin_src emacs-lisp
  (use-package yasnippet
    :general
    (:keymaps 'yas-minor-mode-map
              "C-;" yas-maybe-expand)
    :config
    (yas-global-mode))
#+end_src

** Help
*** Helpful
Helpful is a great package that makes the emacs help menus so much nicer. I basically replace the default emacs help commands with helpful, and then add them under "SPC h" as well.
#+begin_src emacs-lisp
  (use-package helpful
    :general
    ("C-h f" 'helpful-callable)
    ("C-h v" 'helpful-variable)
    ("C-h k" 'helpful-key)
    ("C-h C" 'helpful-command)
    ("C-h h" 'helpful-at-point)
    (dan/leader
      "h" '(:ignore t :which-key "Help")
      "h f" '(helpful-callable :which-key "Function")
      "h v" '(helpful-variable :which-key "Variable")
      "h k" '(helpful-key :which-key "Keybind")
      "h C" '(helpful-command :which-key "Command")
      "h h" '(helpful-at-point :which-key "Here")))
#+end_src
*** Other Bindings
Woman is an inbuilt package that allows you to browse Unix Man Pages
#+begin_src emacs-lisp
  (dan/leader
    "h m" '(woman :which-key "Man"))
#+end_src


** Rainbow Delimeters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+end_src

** Vterm
[[https://github.com/akermu/emacs-libvterm][Vterm]] is my terminal emulator of choice for use inside of emacs
#+begin_src emacs-lisp
  (use-package vterm
    :general
    (dan/leader
      "o t" '(vterm-other-window :which-key "Vterm")))
#+end_src

** Perspective.el
[[https://github.com/nex3/perspective-el][perspective.el]] is a package that adds workspaces to emacs. It allows you to restrict the buffer list so it is shorter and only applies for a single 'perspective'. The package [[https://github.com/bbatsov/persp-projectile][perp-projectile]] adds integration to projectile, meaning that ~SPC p p~ will also create or switch to a new workspace.
#+begin_src emacs-lisp
  (use-package perspective
    :init
    (persp-mode)
    :general
    (dan/leader
      "W" '(:ignore t :which-key "Workspaces")
      "W s" '(persp-switch :which-key "Switch Workspace")
      "W r" '(persp-rename :which-key "Rename Workspace")
      "W a" '(persp-add-buffer :which-key "Add buffer to Workspace")
      "W j" '(persp-next :which-key "Next Workspace")
      "W k" '(persp-prev :which-key "Previous Workspace")
      "W m" '(persp-merge :which-key "Merge Workspace")
      "W u" '(persp-unmerge :which-key "Unmerge Workspace")
      "W S" '(persp-state-save :which-key "Save Workspaces")
      "W L" '(persp-state-load :which-key "Load Workspaces")

      "b B" '(persp-switch-to-buffer :which-key "Global Switch Buffer")
      ))

  (use-package persp-projectile)
#+end_src

** Elfeed
[[https://github.com/skeeto/elfeed][Elfeed]] is a package for reading RSS feeds. I currently use the default config but I may change some things later
#+begin_src emacs-lisp
  (use-package elfeed
    :general
    (dan/leader
      "o r" '(elfeed :which-key "RSS reader"))
    :hook
    ;; Don't display line numbers when reading an RSS document
    (elfeed-show-mode . (lambda () (display-line-numbers-mode -1)))
    ;; Automatically update RSS feeds every 10 minutes
    (emacs-startup . (lambda () (run-at-time 5 600 'elfeed-update)))
    :custom
    (elfeed-feeds
     '(("https://dansdinners.xyz/feed.xml" mine)
       ("https://planet.emacslife.com/atom.xml" emacs))))
#+end_src

** Dashboard
[[github:emacs-dashboard/emacs-dashboard][Emacs Dashboard]] is a pretty dashboard for when emacs opens
#+begin_src emacs-lisp
  (use-package dashboard
    :init
    (add-hook 'after-init-hook 'dashboard-refresh-buffer)
    :custom
    (dashboard-projects-backend 'projectile)
    (dashboard-items
     '((projects . 5)
       (agenda . 5)))
    (dashboard-filter-agenda-entry 'dashboard-filter-agenda-by-todo)
    (dashboard-agenda-sort-strategy '(time-up todo-state-up))
    (dashboard-startup-banner 'logo)
    (dashboard-center-content t)
    :config
    (dashboard-setup-startup-hook))
#+end_src

** exec-path-from-shell
For use in daemon mode starting with systemd, we need to set the path
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (when (daemonp)
      (exec-path-from-shell-initialize)))
#+end_src


